package com.junikarp.qbank.mock;

import com.junikarp.qbank.bookmark.domain.Bookmark;
import com.junikarp.qbank.bookmark.service.port.BookmarkRepository;
import lombok.Getter;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

@Getter
public class FakeBookmarkRepository implements BookmarkRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Bookmark> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Bookmark save(Bookmark bookmark) {
        if (bookmark.getId() == null || bookmark.getId() == 0) {
            Bookmark newBookmark = Bookmark.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .question(bookmark.getQuestion())
                    .user(bookmark.getUser())
                    .build();
            data.add(newBookmark);
            return newBookmark;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), bookmark.getId()));
            data.add(bookmark);
            return bookmark;
        }
    }

    @Override
    public List<Bookmark> findByUserId(Long userId) {
        return data.stream()
                .filter(bookmark -> bookmark.getUser().getId().equals(userId))
                .toList();
    }

    @Override
    public void delete(Long userId, Long questionId) {
        data.removeIf(item -> Objects.equals(item.getUser().getId(), userId) && Objects.equals(item.getQuestion().getId(), questionId));
    }
}
